# Feature Organization & Development

This project organizes code by business domains/features for better maintainability and team collaboration. The [user module](mdc:src/features/user) serves as the reference implementation.

## Feature Structure ([src/features/](mdc:src/features))

Each feature follows the established pattern from the user module:

### User Management Feature ([src/features/user/](mdc:src/features/user))
Complete user management system serving as the template:

**Entry Point**: [index.tsx](mdc:src/features/user/index.tsx)
- Provider wrapper pattern for feature-level state
- Separation of concerns with UserContent component
- Main layout integration with consistent styling

**Feature Structure**:
```
src/features/user/
├── api/                    # TanStack Query hooks for all CRUD operations
│   ├── get-users.ts        # Paginated user listing with filters
│   ├── create-user.ts      # User creation mutation
│   ├── update-user.ts      # User update mutation
│   ├── delete-user.ts      # Single user deletion
│   ├── delete-users.ts     # Bulk user deletion
│   ├── activate-user.ts    # User activation
│   ├── suspend-user.ts     # User suspension
│   └── get-me.ts          # Current user profile
├── components/             # Feature-specific UI components
│   ├── user-table.tsx      # Main data table with filtering/pagination
│   ├── user-columns.tsx    # Table column definitions
│   ├── user-table-toolbar.tsx     # Table filtering and bulk actions
│   ├── user-table-row-actions.tsx # Context menu per row
│   ├── user-dialogs.tsx    # Dialog orchestrator component
│   ├── user-mutate-dialog.tsx     # Add/Edit dialog
│   ├── user-delete-dialog.tsx     # Delete confirmation dialog
│   ├── user-invite-dialog.tsx     # User invitation dialog
│   └── user-primary-buttons.tsx   # Action buttons
├── constants/              # Feature constants and configurations
│   ├── user-constants.ts   # Type definitions and mappings
│   └── user-options.ts     # Dropdown options with icons
├── context/               # Feature-level state management
│   └── user-context.tsx   # Dialog state and current row management
└── index.tsx             # Main feature entry point
```

### Other Implemented Features

**Authentication** ([src/features/auth/](mdc:src/features/auth))
- Multi-step authentication flows
- Sign-in, sign-up, forgot password, OTP verification
- Shared auth layout component

**Dashboard** ([src/features/dashboard/](mdc:src/features/dashboard))
- Main dashboard with analytics widgets
- Data visualization components

**Organization** ([src/features/organization/](mdc:src/features/organization))  
- Department and team management
- Organizational hierarchy

**Settings** ([src/features/settings/](mdc:src/features/settings))
- Application configuration
- User preferences and account settings

## Standard Feature Development Pattern

### 1. Feature Entry Point Pattern
```typescript
// Provider wrapper for feature-level state
export default function FeatureName() {
  return (
    <FeatureProvider>
      <FeatureContent />
    </FeatureProvider>
  )
}

function FeatureContent() {
  const { t } = useTranslation()
  return (
    <Main>
      <div className='mb-2 flex items-center justify-between'>
        <div>
          <h2 className='text-2xl font-bold tracking-tight'>
            {t('page.title', { ns: 'feature-namespace' })}
          </h2>
        </div>
        <FeaturePrimaryButtons />
      </div>
      <FeatureTable />
      <FeatureDialogs />
    </Main>
  )
}
```

### 2. API Layer Pattern
**Query Hooks**: Custom hooks wrapping TanStack Query
```typescript
export const useFeatureData = (props: Props) => {
  return useQuery({
    ...getFeatureQueryOptions(props.input),
    ...props.queryConfig,
  })
}
```

**Mutation Hooks**: CRUD operations with cache invalidation
```typescript
export const useCreateFeature = (config: MutationConfig) => {
  const queryClient = useQueryClient()
  return useMutation({
    mutationFn: createFeatureApi,
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['features'] })
      toast.success(t('message.success.created'))
    },
    ...config,
  })
}
```

### 3. Component Organization Pattern
**Table System**:
- Main table component with data integration
- Separate column definitions file
- Toolbar component for filtering/actions  
- Row actions component for context menus

**Dialog System**:
- Dialog orchestrator managing all dialogs
- Individual dialog components (CRUD, delete, etc.)
- Context-based state coordination

**Action Components**:
- Primary action buttons
- Bulk operation handlers
- Integration with feature context

### 4. State Management Pattern
**Feature Context**:
```typescript
type FeatureDialogType = 'add' | 'edit' | 'delete' | 'custom'

export default function FeatureProvider({ children }: Props) {
  const [open, setOpen] = useDialogState<FeatureDialogType>(null)
  const [currentRow, setCurrentRow] = useState<EntityType | null>(null)
  
  return (
    <FeatureContext value={{ open, setOpen, currentRow, setCurrentRow }}>
      {children}
    </FeatureContext>
  )
}
```

**State Layers**:
1. **Server State**: TanStack Query for all API data and caching
2. **Feature State**: React Context for dialog state and current selections
3. **Component State**: useState for local component interactions
4. **URL State**: TanStack Router search params for filters and pagination

### 5. Constants & Configuration Pattern
**Options Files**: Dropdown configurations with icons and i18n keys
**Constants Files**: Type definitions, validation schemas, and style mappings
**i18n Integration**: Feature-specific translation namespaces

## Development Guidelines

### Adding New Features
1. **Copy Structure**: Use user module as template
2. **Replace Names**: Find/replace "user" with new feature name
3. **API Layer**: Implement feature-specific query/mutation hooks
4. **Context Setup**: Create feature context for state management
5. **Components**: Build table, dialogs, and action components following patterns
6. **Constants**: Define feature-specific constants and options
7. **Routes**: Add routes in appropriate route groups
8. **Navigation**: Update sidebar and navigation
9. **i18n**: Create feature translation namespace

### Code Quality Standards
- **TypeScript**: Full type safety for all components and APIs
- **Error Handling**: Comprehensive loading and error states
- **Accessibility**: ARIA labels and semantic HTML
- **Internationalization**: Proper i18n namespace usage
- **Performance**: Memoization and query optimization
- **Consistency**: Follow established component and naming patterns

