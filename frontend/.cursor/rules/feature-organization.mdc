# Feature Organization Patterns

This project follows a consistent feature-based architecture. All features should follow this organization pattern.

## Feature Directory Structure

```
src/features/{feature-name}/
├── api/                    # API functions and hooks
│   ├── get-xxx.ts         # GET requests
│   ├── create-xxx.ts      # POST requests
│   ├── update-xxx.ts      # PUT/PATCH requests
│   └── delete-xxx.ts      # DELETE requests
├── components/             # Feature-specific components
│   ├── xxx-list.tsx       # List components
│   ├── xxx-form.tsx       # Form components
│   └── xxx-detail.tsx     # Detail components
├── pages/                  # Page components
│   └── xxx-page.tsx       # Main page components
├── type/                   # TypeScript types
│   └── xxx.type.ts        # Feature-specific types
├── constants/              # Constants and enums
│   └── xxx.constants.ts   # Feature constants
├── utils/                  # Utility functions
│   └── xxx.utils.ts       # Feature utilities
├── context/                # React Context (if needed)
│   └── xxx-context.tsx    # Feature context
├── index.tsx               # Main feature component
├── index.ts                # Feature exports
└── README.md               # Feature documentation
```

## API Layer Organization

### File Naming Convention
- **GET requests**: `get-xxx.ts`
- **POST requests**: `create-xxx.ts`
- **PUT/PATCH requests**: `update-xxx.ts`
- **DELETE requests**: `delete-xxx.ts`

### API Function Pattern
Each API file should export:
1. **Parameter interface**: `GetXxxParams`
2. **Response interface**: `GetXxxResponse`
3. **API function**: `getXxxApi`
4. **Query options**: `getXxxQueryOptions`
5. **React Query hook**: `useXxx`

## Component Organization

### Component File Naming
- **List components**: `xxx-list.tsx`
- **Form components**: `xxx-form.tsx`
- **Detail components**: `xxx-detail.tsx`
- **Modal components**: `xxx-modal.tsx`
- **Card components**: `xxx-card.tsx`

### Component Structure
```typescript
import { useTranslation } from 'react-i18next'
import { useXxx } from '../api/get-xxx'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'

interface XxxComponentProps {
  // Props interface
}

export function XxxComponent({ ...props }: XxxComponentProps) {
  const { t } = useTranslation('feature-name')
  const { data, isLoading } = useXxx({ input: { ... } })

  return (
    <Card>
      <CardHeader>
        <CardTitle>{t('title')}</CardTitle>
      </CardHeader>
      <CardContent>
        {/* Component content */}
      </CardContent>
    </Card>
  )
}
```

## Type Organization

### Type File Structure
```typescript
// Feature-specific types
export interface XxxType {
  id: string
  name: string
  // ... other properties
}

// API parameter types
export interface GetXxxParams {
  userId: string
  // ... other parameters
}

// API response types
export interface GetXxxResponse {
  data: XxxType[]
  cursor?: {
    afterCursor?: string
    beforeCursor?: string
  }
}
```

## Constants Organization

### Constants File Structure
```typescript
export enum XxxStatus {
  ACTIVE = 'active',
  INACTIVE = 'inactive',
}

export enum XxxType {
  TYPE_1 = 'type_1',
  TYPE_2 = 'type_2',
}

export const XXX_CONSTANTS = {
  DEFAULT_LIMIT: 10,
  MAX_LIMIT: 100,
} as const
```

## Feature Integration

### Main Feature Component
```typescript
// index.tsx
import { useTranslation } from 'react-i18next'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import { Main } from '@/components/layout/main'
import { XxxList } from './components/xxx-list'
import { XxxForm } from './components/xxx-form'

interface XxxFeatureProps {
  employeeId: string
}

export function XxxFeature({ employeeId }: XxxFeatureProps) {
  const { t } = useTranslation('feature-name')

  return (
    <Main>
      <div className='space-y-6'>
        <div className='flex items-center justify-between'>
          <div>
            <h1 className='text-2xl font-bold tracking-tight'>{t('title')}</h1>
            <p className='text-muted-foreground'>{t('description')}</p>
          </div>
        </div>

        <Tabs defaultValue='list' className='space-y-6'>
          <TabsList className='grid w-full grid-cols-2'>
            <TabsTrigger value='list'>{t('tabs.list')}</TabsTrigger>
            <TabsTrigger value='form'>{t('tabs.form')}</TabsTrigger>
          </TabsList>

          <TabsContent value='list'>
            <XxxList employeeId={employeeId} />
          </TabsContent>

          <TabsContent value='form'>
            <XxxForm employeeId={employeeId} />
          </TabsContent>
        </Tabs>
      </div>
    </Main>
  )
}
```

### Feature Exports
```typescript
// index.ts
export { XxxFeature } from './index.tsx'
```

## Internationalization

### Translation Files
Create translation files in `public/locales/{lang}/feature-name.json`:

```json
{
  "title": "Feature Title",
  "description": "Feature description",
  "tabs": {
    "list": "List",
    "form": "Form"
  },
  "status": {
    "active": "Active",
    "inactive": "Inactive"
  }
}
```

## Examples

### Employee Feature
Reference: [employee feature](mdc:src/features/employee/)

### Time Management Feature
Reference: [time-management feature](mdc:src/features/time-management/)

## Best Practices

1. **Consistent naming**: Use kebab-case for files, PascalCase for components
2. **Feature isolation**: Keep feature-specific code within the feature directory
3. **Reusable components**: Place shared components in `src/components/`
4. **Type safety**: Define proper TypeScript interfaces for all data structures
5. **Internationalization**: Use translation keys for all user-facing text
6. **API patterns**: Follow the established API patterns for all requests
7. **Component composition**: Build complex components from simple primitives
8. **Error handling**: Implement proper error boundaries and loading states

## Anti-Patterns to Avoid

❌ **Don't mix feature concerns:**
```typescript
// WRONG - Mixing employee and time management logic
export function EmployeeTimeManagement() {
  // Mixed concerns
}
```

✅ **Separate feature concerns:**
```typescript
// CORRECT - Separate features
export function EmployeeDetail() {
  return (
    <Tabs>
      <TabsContent value='time'>
        <TimeManagement employeeId={employee.id} />
      </TabsContent>
    </Tabs>
  )
}
```

❌ **Don't create deep component nesting:**
```typescript
// WRONG - Too many nested components
export function Feature() {
  return (
    <div>
      <div>
        <div>
          <Component />
        </div>
      </div>
    </div>
  )
}
```

✅ **Use proper component structure:**
```typescript
// CORRECT - Clean component structure
export function Feature() {
  return (
    <Main>
      <div className='space-y-6'>
        <Component />
      </div>
    </Main>
  )
}
```

